<?xml version="1.0" encoding="UTF-8" ?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	You under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->

<schema name="gazetteer" version="1.5">

	<!--"Primary Key" field -->
	<uniqueKey>id</uniqueKey>
	
	<fields>
		<!-- record/document id, supplied by gazetteer ETL process  -->
		<field name="id" type="int" required="true" />
		
		<field name="_version_" type="long" indexed="true" stored="true" />

		<!-- Place ID from source gazetteer -->
		<field name="place_id" type="string" required="true" />
		
		<!--  place name -->
		<field name="name" type="name_idx" required="true" />

		<!-- geo = XY coordinate in the form 'lat,lon'. Created by update-script.js during loading-->
		<field name="geo" type="geo" />
		<field name="lat" type="ignored" />
		<field name="lon" type="ignored" />

		<!--name and id bias scores, supplied by gazetteer ETL -->
		<field name="name_bias" type="tfloat" />
		<field name="id_bias" type="tfloat" />

		<!-- Geonames style Feature Class - A, P, L, H, V, S, T, R -->
		<field name="feat_class" type="string" />

		<!-- Geonames style Feature Code - ADM1, PPL, etc -->
		<field name="feat_code" type="string" />

		<!-- Three flavors of country code: cc is ISO country code -->
		<field name="cc" type="string" />
		<field name="FIPS_cc" type="string" />
		<field name="ISO3_cc" type="string" />
		
		<!--  administrative structure (province/state,county,district -->
		<field name="adm1" type="string" />
		<field name="adm2" type="string" />
		<field name="adm3" type="string" />

		<!-- name_type defines if contents of "name" field is a conventional name, code or abbreviation-->
		<field name="name_type" type="string" stored="true" />

		<!--field name="script" type="string" stored="false" / -->
		<field name="source" type="string" stored="false" />

	</fields>

	<types>

		<!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
		<fieldType name="string" class="solr.StrField" sortMissingLast="true" />

		<!-- Default numeric field types -->
		<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" />
		<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0" />

		<!-- Numeric field types that index value at various levels of precision --> 
		<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" />
		<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0" />


		<!-- reduce the input to lower case,removes punctuation and remove diacritics -->
		<fieldType name="name_idx" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<charFilter class="solr.MappingCharFilterFactory" mapping="OpenSextant-Gazetteer-ASCIIFolding.txt" />
				<tokenizer class="solr.ClassicTokenizerFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

	<!-- Geospatial field type (aka GeoSolr) http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4 -->
		<fieldType name="geo" class="solr.SpatialRecursivePrefixTreeFieldType"
			spatialContextFactory="com.spatial4j.core.context.jts.JtsSpatialContextFactory"
			units="degrees" />


		<!-- completely ignored data -->
		<fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />


		<!--++++++++++++  field types below not used in schema ++++++++++++++++++-->


		<!-- reduce the input to lower case,removes puncuation and reduce diacritics to base character -->
		<fieldType name="name_idx0" class="solr.TextField" positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.ASCIIFoldingFilterFactory" />
				<filter class="solr.EnglishPossessiveFilterFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- A text field that only splits on whitespace for exact matching of 
			words -->
		<fieldType name="text_ws" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- Functionally the same as text_general , but no stop filter -->
		<fieldType name="name_text" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- boolean type: "true" or "false" -->
		<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />
		<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, 
			and is a more restricted form of the canonical representation of dateTime 
			http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC 
			time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z 
			All other components are mandatory. Expressions can also be used to denote 
			calculations that should be performed relative to "NOW" to determine the 
			value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY 
			... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days 
			in the future from the start of the current day Consult the DateField javadocs 
			for more information. Note: For faster range queries, consider the tdate 
			type -->
		<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0" />

		<!-- A Trie based date field for faster date range queries and date faceting. -->
		<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0" />

		<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
		<fieldtype name="binary" class="solr.BinaryField" />

		<!-- The "RandomSortField" is not used to store or search any data. -->
		<fieldType name="random" class="solr.RandomSortField" indexed="true" />
		<!-- A general text field that has reasonable, generic cross-language defaults: 
			it tokenizes with StandardTokenizer, removes stop words from case-insensitive 
			"stopwords.txt" (empty by default), and down cases. At query time only, it 
			also applies synonyms. -->
		<fieldType name="text_general" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English: it tokenizes with 
			StandardTokenizer, removes English stop words (lang/stopwords_en.txt), down 
			cases, protects words from protwords.txt, and finally applies Porter's stemming. 
			The query time analyzer also applies synonyms from synonyms.txt. -->
		<fieldType name="text_en" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<!-- Case insensitive stop word removal. add enablePositionIncrements=true 
					in both the index and query analyzers to leave a 'gap' for more accurate 
					phrase queries. -->
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" enablePositionIncrements="true" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.EnglishPossessiveFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<!-- Optionally you may want to use this less aggressive stemmer instead 
					of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" enablePositionIncrements="true" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.EnglishPossessiveFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<!-- Optionally you may want to use this less aggressive stemmer instead 
					of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- A text field with defaults appropriate for English, plus aggressive 
			word-splitting and autophrase features enabled. This field is just like text_en, 
			except it adds WordDelimiterFilter to enable splitting and matching of words 
			on case-change, alpha numeric boundaries, and non-alphanumeric chars. This 
			means certain compound word cases will work, for example query "wi fi" will 
			match document "WiFi" or "wi-fi". -->
		<fieldType name="text_en_splitting" class="solr.TextField"
			positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer type="index">
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<!-- in this example, we will only use synonyms at query time <filter 
					class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" 
					expand="false"/> -->
				<!-- Case insensitive stop word removal. add enablePositionIncrements=true 
					in both the index and query analyzers to leave a 'gap' for more accurate 
					phrase queries. -->
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" enablePositionIncrements="true" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="1" generateNumberParts="1" catenateWords="1"
					catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" enablePositionIncrements="true" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="1" generateNumberParts="1" catenateWords="0"
					catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<filter class="solr.PorterStemFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- Less flexible matching, but less false matches. Probably not ideal 
			for product names, but may be good for SKUs. Can insert dashes in the wrong 
			place and still match. -->
		<fieldType name="text_en_splitting_tight" class="solr.TextField"
			positionIncrementGap="100" autoGeneratePhraseQueries="true">
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="false" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="lang/stopwords_en.txt" />
				<filter class="solr.WordDelimiterFilterFactory"
					generateWordParts="0" generateNumberParts="0" catenateWords="1"
					catenateNumbers="1" catenateAll="0" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
				<filter class="solr.EnglishMinimalStemFilterFactory" />
				<!-- this filter can remove any duplicate tokens that appear at the same 
					position - sometimes possible with WordDelimiterFilter in conjuncton with 
					stemming. -->
				<filter class="solr.RemoveDuplicatesTokenFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- Just like text_general except it reverses the characters of each token, 
			to enable more efficient leading wildcard queries. -->
		<fieldType name="text_general_rev" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<filter class="solr.LowerCaseFilterFactory" />
				<filter class="solr.ReversedWildcardFilterFactory"
					withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2"
					maxFractionAsterisk="0.33" />
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
					ignoreCase="true" expand="true" />
				<filter class="solr.StopFilterFactory" ignoreCase="true"
					words="stopwords.txt" enablePositionIncrements="true" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<!-- charFilter + WhitespaceTokenizer -->
		<!-- <fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" 
			> <analyzer> <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/> 
			<tokenizer class="solr.WhitespaceTokenizerFactory"/> </analyzer> </fieldType> -->

		<!-- This is an example of using the KeywordTokenizer along With various 
			TokenFilterFactories to produce a sortable field that does not include some 
			properties of the source text -->
		<fieldType name="alphaOnlySort" class="solr.TextField"
			sortMissingLast="true" omitNorms="true">
			<analyzer>
				<!-- KeywordTokenizer does no actual tokenizing, so the entire input 
					string is preserved as a single token -->
				<tokenizer class="solr.KeywordTokenizerFactory" />
				<!-- The LowerCase TokenFilter does what you expect, which can be when 
					you want your sorting to be case insensitive -->
				<filter class="solr.LowerCaseFilterFactory" />
				<!-- The TrimFilter removes any leading or trailing whitespace -->
				<filter class="solr.TrimFilterFactory" />
				<!-- The PatternReplaceFilter gives you the flexibility to use Java Regular 
					expression to replace any sequence of characters matching a pattern with 
					an arbitrary replacement string, which may include back references to portions 
					of the original string matched by the pattern. See the Java Regular Expression 
					documentation for more information on pattern and replacement string syntax. 
					http://java.sun.com/j2se/1.6.0/docs/api/java/util/regex/package-summary.html -->
				<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])"
					replacement="" replace="all" />
			</analyzer>
		</fieldType>

		<fieldtype name="phonetic" stored="false" indexed="true"
			class="solr.TextField">
			<analyzer>
				<tokenizer class="solr.StandardTokenizerFactory" />
				<filter class="solr.PhoneticFilterFactory" encoder="Metaphone"
					inject="false" />
			</analyzer>
		</fieldtype>

		<!-- lowercases the entire field value, keeping it as a single token. -->
		<fieldType name="lowercase" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.KeywordTokenizerFactory" />
				<filter class="solr.LowerCaseFilterFactory" />
			</analyzer>
		</fieldType>

		<fieldType name="text_path" class="solr.TextField"
			positionIncrementGap="100">
			<analyzer>
				<tokenizer class="solr.PathHierarchyTokenizerFactory" />
			</analyzer>
		</fieldType>

		<!-- This point type indexes the coordinates as separate fields (subFields) 
			If subFieldType is defined, it references a type, and a dynamic field definition 
			is created matching *___<typename>. Alternately, if subFieldSuffix is defined, 
			that is used to create the subFields. Example: if subFieldType="double", 
			then the coordinates would be indexed in fields myloc_0___double,myloc_1___double. 
			Example: if subFieldSuffix="_d" then the coordinates would be indexed in 
			fields myloc_0_d,myloc_1_d The subFields are an implementation detail of 
			the fieldType, and end users normally should not need to know about them. -->
		<!-- <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/> -->

		<!-- A specialized field for geospatial search. If indexed, this fieldType 
			must not be multivalued. -->
		<fieldType name="location" class="solr.LatLonType"
			subFieldSuffix="_coordinate" />

		<!-- Geospatial field type (aka GeoSolr) http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4 
			Note: This field type has some optional params: spatialContextFactory, geo, 
			distCalculator, worldbounds, distErrPct, defaultFieldValuesArrayLen, prefixTree, 
			maxLevels, maxDetailDist -->
		<fieldType name="geo" class="solr.SpatialRecursivePrefixTreeFieldType"
			spatialContextFactory="com.spatial4j.core.context.jts.JtsSpatialContextFactory"
			units="degrees" />

		<!-- maxDetailDist="0.00009"/> 10meter accuracy specified in degrees (111.2km/degree) -->

	</types>

</schema>
